!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/woodo/Dropbox/amateurgrammer/Poker-Go/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20211114.0/
Poker-Go	README.md	/^# Poker-Go$/;"	c
TestNewTable	_test.go	/^func TestNewTable(t *testing.T) {$/;"	f	package:main
addPlayer	player.go	/^func (tablePointer *table) addPlayer() {$/;"	f	unknown:main.table
bet	player.go	/^func (playerPointer *player) bet() {$/;"	f	struct:main.player
betround	table.go	/^	betround int$/;"	m	struct:main.table	typeref:typename:int
blind	player.go	/^	blind      int$/;"	m	struct:main.player	typeref:typename:int
board	table.go	/^	board    []string$/;"	m	struct:main.table	typeref:typename:[]string
chips	player.go	/^	chips      int$/;"	m	struct:main.player	typeref:typename:int
currentBet	player.go	/^	currentBet string$/;"	m	struct:main.player	typeref:typename:string
deal	table.go	/^func (tablePointer *table) deal() {$/;"	f	struct:main.table
dealer	table.go	/^	dealer  deck$/;"	m	struct:main.table	typeref:typename:deck
deck	deck.go	/^type deck []string$/;"	t	package:main	typeref:typename:[]string
getName	player.go	/^func getName(i int) string {$/;"	f	package:main	typeref:typename:string
hand	player.go	/^	hand       []string$/;"	m	struct:main.player	typeref:typename:[]string
handVal	player.go	/^	handVal    int$/;"	m	struct:main.player	typeref:typename:int
main	_test.go	/^package main$/;"	p
main	deck.go	/^package main$/;"	p
main	main.go	/^func main() {$/;"	f	package:main
main	main.go	/^package main$/;"	p
main	player.go	/^package main$/;"	p
main	table.go	/^package main$/;"	p
name	player.go	/^	name       string$/;"	m	struct:main.player	typeref:typename:string
newPlayers	player.go	/^func newPlayers() []player {$/;"	f	package:main	typeref:typename:[]player
play	table.go	/^func play() error {$/;"	f	package:main	typeref:typename:error
player	player.go	/^type player struct {$/;"	s	package:main
players	table.go	/^	players []player$/;"	m	struct:main.table	typeref:typename:[]player
playhand	table.go	/^func (tablePointer *table) playhand() {$/;"	f	struct:main.table
pot	table.go	/^	pot      int$/;"	m	struct:main.table	typeref:typename:int
rmPlayer	player.go	/^func (tablePointer *table) rmPlayer() {$/;"	f	unknown:main.table
setPlayer	player.go	/^func (tablePointer *table) setPlayer(n int, s string) {$/;"	f	unknown:main.table
shuffle	deck.go	/^func shuffle() deck {$/;"	f	package:main	typeref:typename:deck
table	table.go	/^type table struct {$/;"	s	package:main
topbet	table.go	/^	topbet   int$/;"	m	struct:main.table	typeref:typename:int
